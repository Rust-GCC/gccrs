
#line 2 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 183
#define YY_END_OF_BUFFER 184
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[502] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   10,   10,    7,    7,
        0,    0,    0,    0,    0,    0,  184,  183,    3,  108,
      156,   94,  102,  181,  168,  117,   87,   88,  175,  173,
       83,  165,   86,  177,   78,   78,  101,   82,  112,  106,
      116,  103,   93,   74,   91,   92,  179,   19,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   89,  171,   90,   99,
       74,  162,  157,  162,  147,  146,  151,  150,  149,  153,

      153,  155,  154,  183,  183,  131,  126,  131,  138,  138,
      136,  134,  133,   98,   95,  183,   97,   96,  183,  119,
      183,  119,  119,   10,    9,    7,    6,   18,   18,   18,
       14,   14,   14,    2,    1,  107,  182,  167,  169,  176,
      174,  166,  164,   85,   15,    8,  178,   80,   78,    0,
        0,    0,    0,  100,  163,  110,  109,  104,  105,  113,
      114,   74,  180,   74,   74,   22,  125,  139,   74,   74,
       74,   74,   74,   74,   74,   31,   74,   74,   74,   74,
       74,   37,   74,   39,   74,   41,   74,   74,   74,   74,
       74,   74,   74,   74,   74,  145,  148,   74,   74,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   74,  172,
      170,   74,  161,  158,  158,  161,  161,  152,  144,    0,
      144,    0,    0,    0,  130,  127,  130,  130,  137,    0,
       97,  123,  119,    0,  123,    0,    0,  119,  119,   10,
        7,   17,   16,   13,   12,    1,   84,    0,    5,    5,
       79,   80,   79,    0,   81,   77,   76,   75,  111,  115,
       74,   74,   74,   24,  132,  135,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   38,   74,   42,   74,
       74,   74,   46,   74,   48,   74,   74,   74,   74,   54,
       74,   55,   74,   74,   74,   74,   74,   74,   74,   74,

       74,   74,   74,   69,   74,   74,   74,   74,    4,    0,
        0,  140,    0,    0,    0,    0,    0,  120,    0,    0,
      119,  124,  119,   11,    8,    0,    0,   80,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   32,   33,   74,
       74,   74,   40,   43,   74,   74,   47,   74,   74,   51,
       52,   53,   74,   57,   74,   74,   74,   74,   74,   63,
       64,   74,   74,   74,   74,   74,   74,   74,    0,  159,
        0,    0,    0,    0,    0,    0,  128,    0,    0,  119,
      119,   74,   74,   74,   25,   26,   27,   74,   29,   74,
       74,   35,   36,   44,   45,   74,   74,   74,   74,   74,

       74,   61,   62,   74,   66,   74,   74,   74,   71,   72,
       73,    0,    0,  160,    0,    0,    0,    0,  141,    0,
        0,  129,    0,    0,    0,  121,  119,   74,   74,   23,
       74,   74,   34,   74,   74,   56,   58,   59,   60,   65,
       67,   74,   74,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  122,  118,   74,   21,   74,   30,   74,
       74,   68,   70,    0,    0,    0,    0,  142,    0,    0,
        0,    0,    0,   20,   28,   49,   50,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  143,    0,

        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   31,   31,   31,   32,   31,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   34,   33,   33,   33,   33,   33,
       35,   36,   37,   38,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   33,   49,   50,   51,   52,
       53,   54,   33,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,    1,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   69,   68,   68,   68,
       70,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   71,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68
    } ;

static const YY_CHAR yy_meta[72] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    1,    1,    4,    1,    1,    1,    5,    1,    6,
        6,    6,    6,    1,    1,    1,    1,    1,    1,    1,
        6,    6,    7,    7,    8,    1,    1,    1,    9,    6,
        6,    6,    6,    6,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    1,    1,   10,    1,   11,   11,   11,
       11
    } ;

static const flex_int16_t yy_base[566] =
    {   0,
        0,    0,   66,   67, 1090, 1089,   68,   70, 1088, 1087,
     1085, 1084,   75,   76,   74,   77,   75,   78, 1084, 1083,
       83,   84,   87,   88,  123,    0, 1085, 1084, 1083, 1082,
       78,   79,   80,   81,  194,    0, 1084, 1097, 1097, 1056,
     1097, 1097, 1097, 1055,   91, 1097, 1097, 1097, 1054, 1053,
     1097,   77, 1061,  252,  262,  254, 1054, 1097,   89,   80,
       92, 1097, 1097,    0, 1097, 1097, 1050,    0,  240,  267,
      247,  244,  255,  273,  267,  251,   56,  265,  212,  285,
      283,  273,   65, 1028, 1028, 1026, 1097,  272, 1097, 1097,
     1004, 1097, 1097,  339, 1097, 1097, 1097, 1097, 1097, 1097,

     1065, 1097, 1097, 1060,  327, 1097, 1097,  351, 1097, 1063,
     1097, 1097, 1097, 1097, 1097, 1066, 1097, 1097, 1057, 1056,
      363,  257,  297,    0, 1097,    0, 1097, 1097, 1047, 1051,
     1097, 1045, 1049, 1097,    0, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1044,  325,  327, 1097,  405,  411,  425,
      331,  356,    0, 1097, 1097, 1034, 1097, 1097, 1097, 1097,
     1033,    0, 1097, 1003, 1010,    0, 1097, 1097, 1015,  995,
      342,  998, 1002, 1013, 1007,    0,  995,  992,  992,  998,
      995,    0,  991,    0,  991,    0,  987,  990,  316,  301,
      985,  996,  996,  345,  349, 1097, 1097,  335,  989,  975,

      361,  983,  349,  982,  261,  991,  979,  366,  989, 1097,
     1097,  962, 1097, 1097, 1097,  967,    0, 1097, 1097, 1019,
     1018,    0,    0,    0, 1097, 1097,  964,    0, 1097, 1024,
     1097, 1097, 1015, 1014, 1013,  959,    0,  411,  391,    0,
        0, 1097, 1097, 1097, 1097,    0, 1097,    0, 1097, 1003,
     1097,  445,  458,  449,  470,  415,  465,    0, 1097, 1097,
      964,  974,  966,    0, 1097, 1097,  978,  975,  299,  959,
      975,  970,  962,  968,  955,  970,    0,  959,    0,  954,
      952,  964,    0,  961,    0,  948,  948,  943,  959,    0,
      956,    0,  941,  953,  953,  939,  937,  950,  945,  948,

      947,  936,  324,    0,  931,  929,  933,  929,    0,    0,
        0, 1097,  939,  936,    0,    0,    0, 1097,    0,    0,
      400, 1097,  430, 1097, 1097,  490,  494,  498,  919,  918,
      918,  916,  917,  903,  911,  912,  897,    0,    0,  896,
      906,  896,    0,    0,  892,  894,    0,  896,  882,    0,
        0,    0,  881,    0,  879,  883,  885,  871,  865,    0,
      868,  866,  872,  851,  855,  865,  864,  861,  417, 1097,
      864,  860,  859,  856,  883,  437, 1097,  456,  880,  483,
      879,  846,  832,  838,    0,    0,    0,  829,    0,  828,
      825,    0,    0,    0,    0,  811,  815,  810,  814,  812,

      795,    0,    0,  795,    0,  785,  782,  784,    0,    0,
        0,  457,  469, 1097,  782,  781,  776,  745, 1097,  485,
      486, 1097,  487,  488,  771, 1097,  517,  571,  567,    0,
      552,  552,    0,  551,  560,    0,    0,    0,    0,    0,
        0,  559,  551,  491,  495,  561,  560,  342,  559,  497,
      499,  500,  501, 1097,  586,  539,    0,  551,    0,  549,
      549,    0,    0,  502,  503,  553,  551, 1097,  419,  504,
      505,  506,  507,    0,    0,    0,    0,  508,  509,  549,
      493,  510,  511,  516,  517,  519,  521,  467,  443,  523,
      525,  539,  540,  541,  463,  424,  542,  545, 1097,  575,

     1097,  614,  625,  636,  647,  658,  669,  680,  691,  702,
      713,  724,  735,  746,  757,  768,  774,  785,  796,  807,
      816,  827,  838,  844,  851,  855,  447,  446,  433,  432,
      417,  413,  864,  411,  407,  870,  874,  399,  330,  328,
      283,  263,  878,  883,  887,  891,  896,  901,  906,  910,
      914,  919,  924,  929,  933,  938,  943,  948,  952,  957,
      962,  967,  971,  976,  981
    } ;

static const flex_int16_t yy_def[566] =
    {   0,
      501,    1,  502,  502,  503,  503,  504,  504,  505,  505,
      506,  506,  507,  507,  508,  508,  509,  509,  510,  510,
      511,  511,  512,  512,  501,   25,  513,  513,  514,  514,
      515,  515,  516,  516,  501,   35,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  517,  501,  501,  501,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  501,  501,  501,  501,
      517,  501,  501,  518,  501,  501,  501,  501,  501,  501,

      501,  501,  501,  501,  501,  501,  501,  519,  501,  501,
      501,  501,  501,  501,  501,  520,  501,  501,  501,  521,
      501,  521,  521,  522,  501,  523,  501,  501,  501,  501,
      501,  501,  501,  501,  524,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  525,  501,  501,
      501,  501,  526,  501,  501,  501,  501,  501,  501,  501,
      501,  517,  501,  517,  517,  517,  501,  501,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  501,  501,  517,  517,  517,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  501,
      501,  517,  501,  501,  501,  501,  527,  501,  501,  501,
      501,  528,  529,  530,  501,  501,  501,  531,  501,  520,
      501,  501,  521,  501,  501,  501,  532,  521,  521,  522,
      523,  501,  501,  501,  501,  524,  501,  533,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  526,  501,  501,
      517,  517,  517,  517,  501,  501,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  534,
      535,  501,  536,  537,  538,  539,  540,  501,  541,  542,
      521,  501,  521,  501,  501,  501,  501,  501,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  543,  501,
      544,  536,  545,  537,  501,  546,  501,  547,  501,  521,
      521,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  548,  543,  501,  549,  544,  550,  545,  501,  551,
      546,  501,  552,  547,  501,  501,  521,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  553,  548,  554,  549,  501,  550,  555,
      551,  556,  552,  501,  521,  517,  517,  517,  517,  517,
      517,  517,  517,  557,  553,  558,  554,  501,  501,  559,
      555,  560,  556,  517,  517,  517,  517,  561,  557,  562,
      558,  563,  559,  564,  560,  501,  561,  565,  562,  501,
      563,  501,  564,  501,  501,  565,  501,  501,  501,  501,

        0,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501
    } ;

static const flex_int16_t yy_nxt[1169] =
    {   0,
       38,   39,   39,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   56,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   64,   64,   64,   65,   38,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   64,   64,   75,   64,   76,
       77,   64,   78,   79,   80,   81,   82,   83,   84,   85,
       64,   86,   64,   87,   88,   89,   90,   64,   64,   64,
       91,   93,   93,   98,   99,   98,   99,   38,   38,  107,
      110,  111,  107,  110,  111,   38,   38,  115,  115,  117,
      117,  129,  129,  132,  132,  189,  130,  130,  133,  133,

      138,   94,   94,  142,  143,  155,  158,  159,  190,  108,
      105,  105,  108,  191,  156,  157,  205,  139,  160,  161,
      206,  118,  118,  119,  119,   38,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  120,  120,  120,  120,  119,  121,  119,
      119,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  122,  120,
      120,  120,  120,  120,  120,  120,  119,  119,  119,  119,
      123,  123,  123,  123,  134,  134,  134,  134,  134,  134,

      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  135,  135,  135,  135,  134,  134,
      134,  134,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  134,  134,  134,
      134,  135,  135,  135,  135,  145,  194,  232,  379,  195,
      146,  148,  167,  149,  149,  149,  149,  168,  147,  148,
      164,  149,  149,  149,  149,  150,  172,  175,  378,  165,
      196,  197,  149,  150,  187,  166,  176,  150,  210,  173,

      149,  174,  151,  188,  177,  150,  178,  232,  302,  192,
      169,  184,  180,  238,  152,  179,  303,  185,  186,  170,
      181,  171,  153,  193,  182,  183,  199,  203,  198,  248,
      200,  249,  220,  377,  204,  376,  211,  221,  248,  201,
      202,  214,  215,  283,  214,  250,  220,  265,  266,  214,
      256,  256,  468,  226,  334,  335,  226,  281,  214,  284,
      222,  226,  220,  363,  239,  239,  239,  239,  234,  256,
      226,  364,  282,  235,  214,  257,  257,  257,  220,  292,
      469,  220,  234,  220,  223,  267,  226,  224,  299,  290,
      214,  293,  288,  214,  257,  214,  216,  289,  234,  217,

      296,  322,  226,  291,  375,  226,  300,  226,  227,  306,
      501,  228,  370,  307,  234,  297,  369,  234,  320,  234,
      236,  501,  317,  237,  252,  252,  252,  252,  148,  468,
      149,  149,  149,  149,  256,  256,  253,  315,  314,  254,
      322,  254,  150,  252,  255,  255,  255,  255,  253,  149,
      321,  313,  311,  256,  150,  413,  380,  469,  323,  323,
      323,  323,  496,  255,  252,  252,  252,  252,  255,  255,
      255,  255,  327,  499,  327,  421,  326,  328,  328,  328,
      328,  489,  414,  252,  257,  257,  257,  255,  326,  255,
      255,  255,  255,  501,  424,  445,  328,  381,  381,  381,

      381,  500,  422,  257,  327,  496,  327,  413,  255,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  425,  414,  451,  421,  453,  424,  501,  328,  465,
      427,  481,  328,  445,  414,  471,  328,  451,  473,  453,
      479,  465,  483,  471,  485,  473,  487,  479,  491,  483,
      422,  422,  425,  425,  493,  485,  414,  494,  455,  487,
      414,  497,  422,  491,  422,  425,  425,  414,  414,  422,
      422,  425,  425,  414,  414,  422,  422,  498,  493,  494,
      497,  425,  425,  498,  414,  499,  414,  489,  422,  467,
      422,  481,  477,  476,  475,  474,  501,  449,  447,  467,

      463,  462,  461,  460,  425,  425,  414,  422,  459,  458,
      425,  457,  456,  500,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  109,  109,  109,  109,  109,  109,  109,  109,  109,

      109,  109,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  162,
      162,  454,  162,  418,  162,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  230,  230,  230,
      230,  230,  230,  230,  449,  230,  230,  230,  233,  416,
      447,  233,  233,  443,  233,  442,  233,  240,  441,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  241,  440,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  246,
      246,  439,  246,  438,  246,  251,  251,  251,  437,  251,
      258,  436,  435,  258,  324,  324,  324,  434,  324,  324,
      324,  324,  324,  324,  324,  371,  433,  432,  371,  373,
      431,  430,  373,  412,  429,  428,  412,  412,  415,  322,
      426,  415,  417,  419,  374,  417,  420,  418,  372,  420,

      420,  423,  416,  411,  423,  423,  444,  410,  409,  444,
      444,  446,  408,  407,  446,  448,  406,  405,  448,  450,
      404,  403,  450,  450,  452,  402,  401,  452,  452,  464,
      400,  399,  464,  464,  466,  398,  397,  466,  470,  396,
      395,  470,  470,  472,  394,  393,  472,  472,  478,  392,
      391,  478,  478,  480,  390,  389,  480,  482,  388,  387,
      482,  482,  484,  386,  385,  484,  484,  486,  384,  383,
      486,  486,  488,  382,  374,  488,  490,  372,  368,  490,
      490,  492,  367,  366,  492,  492,  495,  365,  362,  495,
      361,  360,  359,  358,  357,  356,  355,  354,  353,  352,

      351,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  338,  337,  336,  333,  332,  331,  330,
      329,  325,  319,  318,  318,  501,  231,  316,  312,  312,
      310,  309,  308,  305,  304,  301,  298,  295,  294,  287,
      286,  285,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  264,  263,  262,  261,  260,
      259,  247,  245,  244,  243,  242,  232,  232,  231,  229,
      219,  218,  212,  209,  208,  207,  163,  154,  144,  141,
      140,  137,  136,  501,  127,  127,  125,  125,  113,  113,
      103,  103,  101,  101,   96,   96,   37,  501,  501,  501,

      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501
    } ;

static const flex_int16_t yy_chk[1169] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    7,    7,    8,    8,   13,   14,   15,
       17,   17,   16,   18,   18,   21,   22,   21,   22,   23,
       24,   31,   32,   33,   34,   77,   31,   32,   33,   34,

       45,    3,    4,   52,   52,   59,   60,   60,   77,   15,
       13,   14,   16,   77,   59,   59,   83,   45,   61,   61,
       83,   23,   24,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   54,   79,  122,  542,   79,
       54,   56,   70,   56,   56,   56,   56,   70,   54,   55,
       69,   55,   55,   55,   55,   56,   71,   72,  541,   69,
       80,   80,   56,   55,   76,   69,   72,   56,   88,   71,

       55,   71,   55,   76,   73,   55,   73,  123,  205,   78,
       70,   75,   74,  122,   55,   73,  205,   75,   75,   70,
       74,   70,   55,   78,   74,   74,   81,   82,   80,  145,
       81,  146,  105,  540,   82,  539,   88,  105,  145,   81,
       81,   94,   94,  190,   94,  146,  105,  171,  171,   94,
      151,  151,  448,  108,  269,  269,  108,  189,   94,  190,
      105,  108,  105,  303,  123,  123,  123,  123,  121,  151,
      108,  303,  189,  121,   94,  152,  152,  152,  105,  198,
      448,  105,  121,  105,  105,  171,  108,  105,  203,  195,
       94,  198,  194,   94,  152,   94,   94,  194,  121,   94,

      201,  239,  108,  195,  538,  108,  203,  108,  108,  208,
      321,  108,  535,  208,  121,  201,  534,  121,  532,  121,
      121,  238,  531,  121,  148,  148,  148,  148,  149,  469,
      149,  149,  149,  149,  256,  256,  148,  530,  529,  150,
      323,  150,  149,  148,  150,  150,  150,  150,  148,  149,
      238,  528,  527,  256,  149,  369,  321,  469,  239,  239,
      239,  239,  496,  150,  252,  252,  252,  252,  254,  254,
      254,  254,  253,  495,  253,  376,  252,  253,  253,  253,
      253,  489,  369,  252,  257,  257,  257,  254,  252,  255,
      255,  255,  255,  380,  378,  412,  253,  323,  323,  323,

      323,  495,  376,  257,  326,  488,  326,  413,  255,  326,
      326,  326,  326,  327,  327,  327,  327,  328,  328,  328,
      328,  378,  412,  420,  421,  423,  424,  427,  326,  444,
      380,  481,  327,  445,  413,  450,  328,  451,  452,  453,
      464,  465,  470,  471,  472,  473,  478,  479,  482,  483,
      420,  421,  423,  424,  484,  485,  444,  486,  427,  487,
      445,  490,  450,  491,  451,  452,  453,  464,  465,  470,
      471,  472,  473,  478,  479,  482,  483,  492,  493,  494,
      497,  484,  485,  498,  486,  500,  487,  480,  490,  467,
      491,  466,  461,  460,  458,  456,  455,  449,  447,  446,

      443,  442,  435,  434,  492,  493,  494,  497,  432,  431,
      498,  429,  428,  500,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  509,  509,  509,  509,  509,  509,  509,  509,  509,

      509,  509,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  517,
      517,  425,  517,  418,  517,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  519,  519,  519,  519,

      519,  519,  519,  519,  519,  519,  519,  520,  520,  520,
      520,  520,  520,  520,  417,  520,  520,  520,  521,  416,
      415,  521,  521,  408,  521,  407,  521,  522,  406,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  523,  404,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  524,
      524,  401,  524,  400,  524,  525,  525,  525,  399,  525,
      526,  398,  397,  526,  533,  533,  533,  396,  533,  533,
      533,  533,  533,  533,  533,  536,  391,  390,  536,  537,
      388,  384,  537,  543,  383,  382,  543,  543,  544,  381,
      379,  544,  545,  375,  374,  545,  546,  373,  372,  546,

      546,  547,  371,  368,  547,  547,  548,  367,  366,  548,
      548,  549,  365,  364,  549,  550,  363,  362,  550,  551,
      361,  359,  551,  551,  552,  358,  357,  552,  552,  553,
      356,  355,  553,  553,  554,  353,  349,  554,  555,  348,
      346,  555,  555,  556,  345,  342,  556,  556,  557,  341,
      340,  557,  557,  558,  337,  336,  558,  559,  335,  334,
      559,  559,  560,  333,  332,  560,  560,  561,  331,  330,
      561,  561,  562,  329,  314,  562,  563,  313,  308,  563,
      563,  564,  307,  306,  564,  564,  565,  305,  302,  565,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  291,

      289,  288,  287,  286,  284,  282,  281,  280,  278,  276,
      275,  274,  273,  272,  271,  270,  268,  267,  263,  262,
      261,  250,  236,  235,  234,  233,  230,  227,  221,  220,
      216,  212,  209,  207,  206,  204,  202,  200,  199,  193,
      192,  191,  188,  187,  185,  183,  181,  180,  179,  178,
      177,  175,  174,  173,  172,  170,  169,  165,  164,  161,
      156,  144,  133,  132,  130,  129,  120,  119,  116,  110,
      104,  101,   91,   86,   85,   84,   67,   57,   53,   50,
       49,   44,   40,   37,   30,   29,   28,   27,   20,   19,
       12,   11,   10,    9,    6,    5,  501,  501,  501,  501,

      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[184] =
    {   0,
0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <stdio.h>
#include <ctype.h>

static int num_hashes;
static int end_hashes;
static int saw_non_hash;

#line 872 "lex.yy.cc"

#line 874 "lex.yy.cc"

#define INITIAL 0
#define str 1
#define rawstr 2
#define rawstr_esc_begin 3
#define rawstr_esc_body 4
#define rawstr_esc_end 5
#define byte 6
#define bytestr 7
#define rawbytestr 8
#define rawbytestr_nohash 9
#define pound 10
#define shebang_or_attr 11
#define ltorchar 12
#define linecomment 13
#define doc_line 14
#define blockcomment 15
#define doc_block 16
#define suffix 17

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 34 "lexer.l"


#line 1026 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 502 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1097 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_more_len); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 36 "lexer.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 37 "lexer.l"
{ yyless(0); BEGIN(INITIAL); }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 39 "lexer.l"
{ }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 41 "lexer.l"
{
  // UTF-8 byte order mark (BOM), ignore if in line 1, error otherwise
  if (yyget_lineno() != 1) {
    return -1;
  }
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 48 "lexer.l"
{ BEGIN(doc_line); yymore(); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 49 "lexer.l"
{ BEGIN(INITIAL);
                        yyleng--;
                        yytext[yyleng] = 0;
                        return ((yytext[2] == '!') ? INNER_DOC_COMMENT : OUTER_DOC_COMMENT);
                      }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 54 "lexer.l"
{ yymore(); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 56 "lexer.l"
{ BEGIN(linecomment); }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 57 "lexer.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 58 "lexer.l"
{ }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 60 "lexer.l"
{ yy_push_state(INITIAL); yy_push_state(doc_block); yymore(); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 61 "lexer.l"
{ yy_push_state(doc_block); yymore(); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 62 "lexer.l"
{
    yy_pop_state();
    if (yy_top_state() == doc_block) {
        yymore();
    } else {
        return ((yytext[2] == '!') ? INNER_DOC_COMMENT : OUTER_DOC_COMMENT);
    }
}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 70 "lexer.l"
{ yymore(); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 72 "lexer.l"
{ yy_push_state(blockcomment); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "lexer.l"
{ yy_push_state(blockcomment); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "lexer.l"
{ yy_pop_state(); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 75 "lexer.l"
{ }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return UNDERSCORE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return ABSTRACT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return ALIGNOF; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return AS; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return BECOME; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return BOX; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return BREAK; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return CATCH; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return CONST; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return CONTINUE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return CRATE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return DEFAULT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return DO; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return ELSE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return ENUM; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return EXTERN; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 93 "lexer.l"
{ return FALSE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 94 "lexer.l"
{ return FINAL; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "lexer.l"
{ return FN; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return FOR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return IF; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return IMPL; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return IN; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return LET; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return LOOP; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return MACRO; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return MATCH; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return MOD; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return MOVE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return MUT; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return OFFSETOF; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return OVERRIDE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return PRIV; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return PROC; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return PURE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return PUB; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return REF; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return RETURN; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return SELF; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return SIZEOF; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return STATIC; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return STRUCT; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return SUPER; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return TRAIT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return TRUE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return TYPE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return TYPEOF; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return UNION; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return UNSAFE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return UNSIZED; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return USE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return VIRTUAL; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return WHERE; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return WHILE; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return YIELD; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return IDENT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "lexer.l"
{ BEGIN(suffix); return LIT_INTEGER; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "lexer.l"
{ BEGIN(suffix); return LIT_INTEGER; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "lexer.l"
{ BEGIN(suffix); return LIT_INTEGER; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "lexer.l"
{ BEGIN(suffix); return LIT_INTEGER; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "lexer.l"
{ yyless(yyleng - 2); BEGIN(suffix); return LIT_INTEGER; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "lexer.l"
{ BEGIN(suffix); return LIT_FLOAT; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "lexer.l"
{ BEGIN(suffix); return LIT_FLOAT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 144 "lexer.l"
{ return ';'; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 145 "lexer.l"
{ return ','; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 146 "lexer.l"
{ return DOTDOTDOT; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 147 "lexer.l"
{ return DOTDOT; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 148 "lexer.l"
{ return '.'; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 149 "lexer.l"
{ return '('; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 150 "lexer.l"
{ return ')'; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 151 "lexer.l"
{ return '{'; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 152 "lexer.l"
{ return '}'; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 153 "lexer.l"
{ return '['; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 154 "lexer.l"
{ return ']'; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 155 "lexer.l"
{ return '@'; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 156 "lexer.l"
{ BEGIN(pound); yymore(); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 157 "lexer.l"
{ BEGIN(shebang_or_attr); yymore(); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 158 "lexer.l"
{
  BEGIN(INITIAL);
  yyless(2);
  return SHEBANG;
}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 163 "lexer.l"
{
  // Since the \n was eaten as part of the token, yylineno will have
  // been incremented to the value 2 if the shebang was on the first
  // line. This yyless undoes that, setting yylineno back to 1.
  yyless(yyleng - 1);
  if (yyget_lineno() == 1) {
    BEGIN(INITIAL);
    return SHEBANG_LINE;
  } else {
    BEGIN(INITIAL);
    yyless(2);
    return SHEBANG;
  }
}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 177 "lexer.l"
{ BEGIN(INITIAL); yyless(1); return '#'; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return '~'; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return MOD_SEP; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return ':'; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return '$'; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return '?'; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return EQEQ; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return FAT_ARROW; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return '='; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return NE; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return '!'; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return LE; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return SHL; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return SHLEQ; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return '<'; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return GE; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return SHR; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return SHREQ; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return '>'; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 199 "lexer.l"
{ BEGIN(ltorchar); yymore(); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 200 "lexer.l"
{ BEGIN(INITIAL); return STATIC_LIFETIME; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 201 "lexer.l"
{ BEGIN(INITIAL); return LIFETIME; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 202 "lexer.l"
{ BEGIN(suffix); return LIT_CHAR; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 203 "lexer.l"
{ BEGIN(suffix); return LIT_CHAR; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 204 "lexer.l"
{ BEGIN(suffix); return LIT_CHAR; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 205 "lexer.l"
{ BEGIN(suffix); return LIT_CHAR; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 206 "lexer.l"
{ BEGIN(suffix); return LIT_CHAR; }
	YY_BREAK
case YY_STATE_EOF(ltorchar):
#line 207 "lexer.l"
{ BEGIN(INITIAL); return -1; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 209 "lexer.l"
{ BEGIN(bytestr); yymore(); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 210 "lexer.l"
{ BEGIN(suffix); return LIT_BYTE_STR; }
	YY_BREAK
case YY_STATE_EOF(bytestr):
#line 212 "lexer.l"
{ return -1; }
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 213 "lexer.l"
{ yymore(); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 214 "lexer.l"
{ yymore(); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 215 "lexer.l"
{ yymore(); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return -1; }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 217 "lexer.l"
{ yymore(); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 219 "lexer.l"
{ BEGIN(rawbytestr_nohash); yymore(); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 220 "lexer.l"
{ BEGIN(suffix); return LIT_BYTE_STR_RAW; }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 221 "lexer.l"
{ yymore(); }
	YY_BREAK
case YY_STATE_EOF(rawbytestr_nohash):
#line 222 "lexer.l"
{ return -1; }
	YY_BREAK
case 135:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 224 "lexer.l"
{
    BEGIN(rawbytestr);
    yymore();
    num_hashes = 0;
    saw_non_hash = 0;
    end_hashes = 0;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 231 "lexer.l"
{
    if (!saw_non_hash) {
        num_hashes++;
    } else if (end_hashes != 0) {
        end_hashes++;
        if (end_hashes == num_hashes) {
            BEGIN(INITIAL);
            return LIT_BYTE_STR_RAW;
        }
    }
    yymore();
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 243 "lexer.l"
{
    end_hashes = 1;
    if (end_hashes == num_hashes) {
        BEGIN(INITIAL);
        return LIT_BYTE_STR_RAW;
    }
    yymore();
}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 251 "lexer.l"
{
    if (!saw_non_hash) {
        saw_non_hash = 1;
    }
    if (end_hashes != 0) {
        end_hashes = 0;
    }
    yymore();
}
	YY_BREAK
case YY_STATE_EOF(rawbytestr):
#line 260 "lexer.l"
{ return -1; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 262 "lexer.l"
{ BEGIN(byte); yymore(); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 263 "lexer.l"
{ BEGIN(INITIAL); return LIT_BYTE; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 264 "lexer.l"
{ BEGIN(INITIAL); return LIT_BYTE; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 265 "lexer.l"
{ BEGIN(INITIAL); return LIT_BYTE; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 266 "lexer.l"
{ BEGIN(INITIAL); return LIT_BYTE; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 267 "lexer.l"
{ BEGIN(INITIAL); return LIT_BYTE; }
	YY_BREAK
case YY_STATE_EOF(byte):
#line 268 "lexer.l"
{ BEGIN(INITIAL); return -1; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 270 "lexer.l"
{ BEGIN(rawstr); yymore(); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 271 "lexer.l"
{ BEGIN(suffix); return LIT_STR_RAW; }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 272 "lexer.l"
{ yymore(); }
	YY_BREAK
case YY_STATE_EOF(rawstr):
#line 273 "lexer.l"
{ return -1; }
	YY_BREAK
case 148:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 275 "lexer.l"
{
    BEGIN(rawstr_esc_begin);
    yymore();
    num_hashes = 0;
    saw_non_hash = 0;
    end_hashes = 0;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 283 "lexer.l"
{
    num_hashes++;
    yymore();
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 287 "lexer.l"
{
    BEGIN(rawstr_esc_body);
    yymore();
}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 291 "lexer.l"
{ return -1; }
	YY_BREAK
case 152:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 293 "lexer.l"
{
  BEGIN(rawstr_esc_end);
  yymore();
 }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 297 "lexer.l"
{
  yymore();
 }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 301 "lexer.l"
{
  end_hashes++;
  if (end_hashes == num_hashes) {
    BEGIN(INITIAL);
    return LIT_STR_RAW;
  }
  yymore();
 }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 309 "lexer.l"
{
  end_hashes = 0;
  BEGIN(rawstr_esc_body);
  yymore();
 }
	YY_BREAK
case YY_STATE_EOF(rawstr_esc_begin):
case YY_STATE_EOF(rawstr_esc_body):
case YY_STATE_EOF(rawstr_esc_end):
#line 315 "lexer.l"
{ return -1; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 317 "lexer.l"
{ BEGIN(str); yymore(); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 318 "lexer.l"
{ BEGIN(suffix); return LIT_STR; }
	YY_BREAK
case YY_STATE_EOF(str):
#line 320 "lexer.l"
{ return -1; }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 321 "lexer.l"
{ yymore(); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 322 "lexer.l"
{ yymore(); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 323 "lexer.l"
{ yymore(); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 324 "lexer.l"
{ return -1; }
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 325 "lexer.l"
{ yymore(); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 327 "lexer.l"
{ return LARROW; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 328 "lexer.l"
{ return RARROW; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 329 "lexer.l"
{ return '-'; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 330 "lexer.l"
{ return MINUSEQ; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 331 "lexer.l"
{ return ANDAND; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 332 "lexer.l"
{ return '&'; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 333 "lexer.l"
{ return ANDEQ; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 334 "lexer.l"
{ return OROR; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 335 "lexer.l"
{ return '|'; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 336 "lexer.l"
{ return OREQ; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 337 "lexer.l"
{ return '+'; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 338 "lexer.l"
{ return PLUSEQ; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 339 "lexer.l"
{ return '*'; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 340 "lexer.l"
{ return STAREQ; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 341 "lexer.l"
{ return '/'; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 342 "lexer.l"
{ return SLASHEQ; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 343 "lexer.l"
{ return '^'; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 344 "lexer.l"
{ return CARETEQ; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 345 "lexer.l"
{ return '%'; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 346 "lexer.l"
{ return PERCENTEQ; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(pound):
case YY_STATE_EOF(shebang_or_attr):
case YY_STATE_EOF(linecomment):
case YY_STATE_EOF(doc_line):
case YY_STATE_EOF(blockcomment):
case YY_STATE_EOF(doc_block):
case YY_STATE_EOF(suffix):
#line 348 "lexer.l"
{ return 0; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 350 "lexer.l"
ECHO;
	YY_BREAK
#line 2179 "lex.yy.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 502 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 502 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 501);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 350 "lexer.l"


