#pragma once

#include <string>

typedef enum {
    NN_ViewItemExternFn,
    NN_TyParam,
    NN_DeclLocal,
    NN_DocComment,
    NN_WherePredicate,
    NN_ExprAddrOf,
    NN_TypeMethod,
    NN_crate,
    NN_DefaultFieldInit,
    NN_ExprBinary,
    NN_ExprAssignBitAnd,
    NN_TyFnDecl,
    NN_Public,
    NN_Pats,
    NN_ViewPathSimple,
    NN_TyParams,
    NN_ExprIf,
    NN_Args,
    NN_MetaItems,
    NN_AttrsAndVis,
    NN_LitInteger,
    NN_ExprPath,
    NN_ExprField,
    NN_TyDefault,
    NN_ExprAssignAdd,
    NN_ExprYield,
    NN_ImplItems,
    NN_TyRptr,
    NN_TySum,
    NN_ExprAssignDiv,
    NN_PatTup,
    NN_ViewPath,
    NN_ItemImplNeg,
    NN_ExprWhile,
    NN_WherePredicates,
    NN_FieldInits,
    NN_PatQualifiedPath,
    NN_ExprMatch,
    NN_Binding,
    NN_ExprAssignBitOr,
    NN_ItemImpl,
    NN_ForeignItem,
    NN_Arg,
    NN_Bindings,
    NN_PatWild,
    NN_ExprTypeAscr,
    NN_ExprBreak,
    NN_ExprIfLet,
    NN_Inherited,
    NN_TyPtr,
    NN_Arms,
    NN_LitByteStr,
    NN_ItemConst,
    NN_ItemImplDefault,
    NN_VecRepeat,
    NN_TTTok,
    NN_RetTy,
    NN_TySumsAndBindings,
    NN_MetaList,
    NN_ExprQualifiedPath,
    NN_ExprAssignBitXor,
    NN_Macro,
    NN_Super,
    NN_ForeignFn,
    NN_SelfLower,
    NN_ExprAssign,
    NN_OuterAttrs,
    NN_ItemMacro,
    NN_ForeignItems,
    NN_Items,
    NN_TraitMacroItem,
    NN_ExprWhileLet,
    NN_BindByRef,
    NN_ImplType,
    NN_ExprLoop,
    NN_SelfRegion,
    NN_TyTup,
    NN_PatUnit,
    NN_ForInType,
    NN_FnDecl,
    NN_PatUniq,
    NN_UnsafeBlock,
    NN_TyQualifiedPath,
    NN_TyBox,
    NN_PatEnum,
    NN_TyClosure,
    NN_ForSized,
    NN_ExprAssignSub,
    NN_GenericValues,
    NN_TyPath,
    NN_PatIdent,
    NN_ConstDefault,
    NN_WhereClause,
    NN_MutImmutable,
    NN_TyMacro,
    NN_ExprTupleIndex,
    NN_ImplMacroItem,
    NN_ExprTry,
    NN_ExprCast,
    NN_Provided,
    NN_PatRegion,
    NN_ExprAssignShl,
    NN_static_lifetime,
    NN_MetaNameValue,
    NN_ExprStruct,
    NN_ExprAssignShr,
    NN_FieldInit,
    NN_Generics,
    NN_ExprForLoop,
    NN_Method,
    NN_TySums,
    NN_ExprVec,
    NN_LitChar,
    NN_PatFields,
    NN_PatMac,
    NN_InnerAttr,
    NN_ViewPathGlob,
    NN_ItemStatic,
    NN_PatRange,
    NN_LitBool,
    NN_IdentsOrSelf,
    NN_ItemFn,
    NN_ExprCall,
    NN_Default,
    NN_trait,
    NN_Required,
    NN_TyInfer,
    NN_ConstTraitItem,
    NN_SelfStatic,
    NN_ExprAssignRem,
    NN_PatLit,
    NN_PatField,
    NN_TyNil,
    NN_EnumDef,
    NN_TypeTraitItem,
    NN_PatVec,
    NN_ident,
    NN_MetaWord,
    NN_Lifetimes,
    NN_LitStr,
    NN_SelfPath,
    NN_bounds,
    NN_EnumDefs,
    NN_ltbounds,
    NN_ViewItemUse,
    NN_ItemImplDefaultNeg,
    NN_PatVecElts,
    NN_TokenTrees,
    NN_semicolon,
    NN_ItemMod,
    NN_ExprUnary,
    NN_ExprBlock,
    NN_ItemUnsafeFn,
    NN_EnumArgs,
    NN_ViewItemExternCrate,
    NN_lifetime,
    NN_StructFields,
    NN_ExprRet,
    NN_ExprAssignMul,
    NN_ItemStruct,
    NN_LitFloat,
    NN_TyTypeof,
    NN_exprs,
    NN_InnerAttrs,
    NN_PolyBound,
    NN_TyVec,
    NN_ArmNonblock,
    NN_ViewPathList,
    NN_TTDelim,
    NN_ItemForeignMod,
    NN_PatTupElts,
    NN_ExprMac,
    NN_ExprParen,
    NN_StaticItem,
    NN_ItemTrait,
    NN_ExprRange,
    NN_ItemUnion,
    NN_ExprIndex,
    NN_ArmBlock,
    NN_DefaultUnsafe,
    NN_PatStruct,
    NN_MutMutable,
    NN_ExprLit,
    NN_TyFixedLengthVec,
    NN_ImplConst,
    NN_InferrableParams,
    NN_Item,
    NN_TraitItems,
    NN_MacroExpr,
    NN_LitByte,
    NN_InferrableParam,
    NN_BindByValue,
    NN_StructField,
    NN_Unsafe,
    NN_ViewPathListEmpty,
    NN_ExprFnBlock,
    NN_ExprAgain,
    NN_components,
    NN_ItemEnum,
    NN_ExprBox,
    NN_ItemTy,
    NN_NONE,
    NN_SHL,
    NN_SHR,
    NN_LE,
    NN_EQEQ,
    NN_NE,
    NN_GE,
    NN_ANDAND,
    NN_OROR,
    NN_LARROW,
    NN_SHLEQ,
    NN_SHREQ,
    NN_MINUSEQ,
    NN_ANDEQ,
    NN_OREQ,
    NN_PLUSEQ,
    NN_STAREQ,
    NN_SLASHEQ,
    NN_CARETEQ,
    NN_PERCENTEQ,
    NN_DOTDOT,
    NN_DOTDOTDOT,
    NN_MOD_SEP,
    NN_RARROW,
    NN_FAT_ARROW,
    NN_LIT_BYTE,
    NN_LIT_CHAR,
    NN_LIT_INTEGER,
    NN_LIT_FLOAT,
    NN_LIT_STR,
    NN_LIT_STR_RAW,
    NN_LIT_BYTE_STR,
    NN_LIT_BYTE_STR_RAW,
    NN_IDENT,
    NN_UNDERSCORE,
    NN_LIFETIME,
    NN_SELF,
    NN_STATIC,
    NN_ABSTRACT,
    NN_ALIGNOF,
    NN_AS,
    NN_BECOME,
    NN_BREAK,
    NN_CATCH,
    NN_CRATE,
    NN_DEFAULT,
    NN_DO,
    NN_ELSE,
    NN_ENUM,
    NN_EXTERN,
    NN_XFALSE,
    NN_FINAL,
    NN_FN,
    NN_FOR,
    NN_IF,
    NN_IMPL,
    NN_IN,
    NN_LET,
    NN_LOOP,
    NN_MACRO,
    NN_MATCH,
    NN_MOD,
    NN_MOVE,
    NN_MUT,
    NN_OFFSETOF,
    NN_OVERRIDE,
    NN_PRIV,
    NN_PUB,
    NN_PURE,
    NN_REF,
    NN_RETURN,
    NN_STRUCT,
    NN_SIZEOF,
    NN_SUPER,
    NN_XTRUE,
    NN_TRAIT,
    NN_TYPE,
    NN_UNION,
    NN_UNSAFE,
    NN_UNSIZED,
    NN_USE,
    NN_VIRTUAL,
    NN_WHILE,
    NN_YIELD,
    NN_CONTINUE,
    NN_PROC,
    NN_BOX,
    NN_CONST,
    NN_WHERE,
    NN_TYPEOF,
    NN_INNER_DOC_COMMENT,
    NN_OUTER_DOC_COMMENT,
    NN_SHEBANG,
    NN_STATIC_LIFETIME,
    NN_SEMI_COLON,
    NN_COMMA,
    NN_SINGLE_DOT,
    NN_AT,
    NN_HASH,
    NN_TILDA,
    NN_COLON,
    NN_DOLLAR,
    NN_EQUALS,
    NN_QUESTION,
    NN_EXCLAIM,
    NN_LESS_THAN,
    NN_GREATER_THAN,
    NN_MINUS,
    NN_AMPERSAND,
    NN_PIPE,
    NN_PLUS,
    NN_MULT,
    NN_DIVIDE,
    NN_HAT,
    NN_PERCENTAGE,
    NN_GLOBAL,
    NN_stmts,

    NN_BiOr,
    NN_BiAnd,
    NN_BiEq,
    NN_BiNe,
    NN_BiLt,
    NN_BiGt,
    NN_BiLe,
    NN_BiGe,
    NN_BiBitOr,
    NN_BiBitXor,
    NN_BiBitAnd,
    NN_BiShl,
    NN_BiShr,
    NN_BiAdd,
    NN_BiSub,
    NN_BiMul,
    NN_BiDiv,
    NN_BiRem,
    NN_UnNeg,
    NN_UnNot,
    NN_UnDeref
} ast_opcode_t;

typedef struct node {
    ast_opcode_t op;
    char* value;
    
    struct node* next;
    struct node* prev;
    
    int n_elems;
    struct node** elems;
} *Node;

#define NODE_TYPE(x_)               x_->op
#define NODE_TYPE_STR(x_)           get_ast_op_string(x_->op)
#define NODE_TYPE_VALUE_STR(x_)     (n->value == NULL ? "NULL" : n->value)
#define NODE_CHAIN(x_)              (x_->next)
#define NODE_RCHAIN(x_)             (x_->prev)

extern Node mk_node(ast_opcode_t, int n, ...);
extern Node mk_node_value(ast_opcode_t, char*, int n, ...);
extern Node mk_atom(ast_opcode_t, const char *value);
extern Node mk_empty_atom(ast_opcode_t);
extern Node mk_none();
extern Node ext_node(struct node *nd, int n, ...);
extern void print_node(Node n, int depth);
extern const char* get_ast_op_string(ast_opcode_t);

extern void push_back(char);
extern void parser_init(int verbose);

extern int n_nodes;
extern node* nodes;
