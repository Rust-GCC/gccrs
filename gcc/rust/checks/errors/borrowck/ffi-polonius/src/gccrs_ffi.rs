// Copyright (C) 2023 Free Software Foundation, Inc.

// This file is part of GCC.

// GCC is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 3, or (at your option) any later
// version.

// GCC is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.

// You should have received a copy of the GNU General Public License
// along with GCC; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

// This is an FFI interface to gccrs (c++).
// It is a counterpart to `rust-polonius-ffi.h`.

// Generated by rust-bindgen, remove unsafe phantoms and add Into impls.
// ```shell
// bindgen \
//  --generate types \
//  --allowlist-file rust-polonius-facts-ffi.h \
//  --no-layout-tests \
//  rust-polonius-ffi.h \
//  -- -x c++
// ```

// GENERATED START ============================================================

use crate::GccrsAtom;

pub type Origin = usize;
pub type Loan = usize;
pub type Point = usize;
pub type Variable = usize;
pub type Path = usize;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pair<T1, T2> {
    pub first: T1,
    pub second: T2,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Triple<T1, T2, T3> {
    pub first: T1,
    pub second: T2,
    pub third: T3,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Slice<T> {
    pub len: u64,
    pub data: *const T,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FactsView {
    pub loan_issued_at: Slice<Triple<Origin, Loan, Point>>,
    pub universal_region: Slice<Origin>,
    pub cfg_edge: Slice<Pair<Point, Point>>,
    pub loan_killed_at: Slice<Pair<Loan, Point>>,
    pub subset_base: Slice<Triple<Origin, Origin, Point>>,
    pub loan_invalidated_at: Slice<Pair<Point, Loan>>,
    pub var_used_at: Slice<Pair<Variable, Point>>,
    pub var_defined_at: Slice<Pair<Variable, Point>>,
    pub var_dropped_at: Slice<Pair<Variable, Point>>,
    pub use_of_var_derefs_origin: Slice<Pair<Variable, Origin>>,
    pub drop_of_var_derefs_origin: Slice<Pair<Variable, Origin>>,
    pub child_path: Slice<Pair<Path, Path>>,
    pub path_is_var: Slice<Pair<Path, Variable>>,
    pub path_assigned_at_base: Slice<Pair<Path, Point>>,
    pub path_moved_at_base: Slice<Pair<Path, Point>>,
    pub path_accessed_at_base: Slice<Pair<Path, Point>>,
    pub known_placeholder_subset: Slice<Pair<Origin, Origin>>,
    pub placeholder: Slice<Pair<Origin, Loan>>,
}

// GENERATED END ==============================================================

impl<T1, T2> Into<(GccrsAtom, GccrsAtom)> for Pair<T1, T2>
where
    GccrsAtom: From<T1> + From<T2>,
{
    fn into(self) -> (GccrsAtom, GccrsAtom) {
        (self.first.into(), self.second.into())
    }
}

impl<T1, T2, T3> Into<(GccrsAtom, GccrsAtom, GccrsAtom)> for Triple<T1, T2, T3>
where
    GccrsAtom: From<T1> + From<T2> + From<T3>,
{
    fn into(self) -> (GccrsAtom, GccrsAtom, GccrsAtom) {
        (self.first.into(), self.second.into(), self.third.into())
    }
}

impl<OUT, IN> Into<Vec<OUT>> for Slice<IN>
where
    IN: Into<OUT> + Copy,
{
    fn into(self) -> Vec<OUT> {
        let slice = unsafe { std::slice::from_raw_parts(self.data, self.len as usize) };
        slice.iter().map(|&e| e.into()).collect()
    }
}
