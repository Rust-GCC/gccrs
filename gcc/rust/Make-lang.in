# Make-lang.in -- Top level -*- makefile -*- fragment for GCC Rust frontend.

# Copyright (C) 2009-2013 Free Software Foundation, Inc.

# This file is part of GCC.

# GCC is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.

# GCC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

# This file provides the language dependent support in the main Makefile.

RUST_EXES = rust

# Tell GNU make to ignore files by these names if they exist.
.phony: rust

# Use strict warnings for this front end.
rust-warn = $(STRICT_WARN)

# Installation name.
GCCRS_INSTALL_NAME := $(shell echo gccrs|sed '$(program_transform_name)')
GCCRS_TARGET_INSTALL_NAME := $(target_noncanonical)-$(shell echo gccrs|sed '$(program_transform_name)')

# Define the names for selecting rust in LANGUAGES.
rust: gccrs$(exeext) grs1$(exeext)

# removed GRS_CFLAGS from here

# removed object files from here
#rs-lexer.o: $(srcdir)/rust/rs-lexer.l rs-parser.o
#	$(FLEX) --outfile=lex.rs.c $(srcdir)/rust/rs-lexer.l
#	$(COMPILER) $(GRS_CFLAGS) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \
#	$(LDFLAGS) -c -o $@ lex.rs.c
# etc. for parser, etc.

# Files for translation from the parse tree to GENERIC
GRS_OBJS = \
	rustfrontend/main.cc
# removed object files from here 

# The compiler itself is called grs1
grs1$(exeext): $(GRS_OBJS) attribs.o $(BACKEND) $(LIBDEPS)
	$(COMPILER) $(GRS_CFLAGS) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \
	$(GRS_OBJS) attribs.o $(BACKEND) $(LIBS) $(BACKENDLIBS)

rsspec.o: $(srcdir)/rust/rsspec.cc $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) \
    $(CONFIG_H) opts.h
	(SHLIB='$(SHLIB)'; \
	$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(DRIVER_DEFINES) \
		$(INCLUDES) $(srcdir)/rust/rsspec.cc)

# Create the compiler driver gccrs.
GCCRS_D_OBJS = $(GCC_OBJS) rsspec.o
gccrs$(exeext): $(GCCRS_D_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBDEPS)
	$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \
	  $(GCCRS_D_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a \
	  $(EXTRA_GCC_LIBS) $(LIBS)

# Build hooks.

rust.srcextra: 
rust.all.cross:

rust.start.encap:
rust.rest.encap:
rust.man:
rust.srcman:

# Clean hooks.

rust.mostlyclean:
	cd $(srcdir)/rust; rm -f *.o y.tab.h y.tab.c lex.yy.c

rust.clean: rust.mostlyclean

rust.tags: force
	cd $(srcdir)/rust; etags -o TAGS.sub *.y *.l *.cc *.h; \
	etags --include TAGS.sub --include ../TAGS.sub

# Build hooks. (2?)

rust.info: 
rust.srcinfo: 
rust.dvi: 
rust.pdf: 
doc/rust.info: 
doc/rust.dvi: 
doc/rust.pdf: 
rust.html: 

# Install hooks.

rust.install-common: installdirs
	-rm -f $(DESTDIR)$(bindir)/$(GCCRS_INSTALL_NAME)$(exeext)
	-rm -f $(DESTDIR)$(bindir)/$(GCCRS_TARGET_INSTALL_NAME)$(exeext)
	$(INSTALL_PROGRAM) gccrs$(exeext) $(DESTDIR)$(bindir)/$(GCCRS_INSTALL_NAME)$(exeext)
	if test -f $(DESTDIR)$(bindir)$(GCCRS_TARGET_INSTALL_NAME)$(exeext); then \
	  :; \
	else \
	  cd $(DESTDIR)$(bindir) && \
	   $(LN) $(GCCRS_INSTALL_NAME)$(exeext) $(GCCRS_TARGET_INSTALL_NAME)$(exeext); \
	fi

rust.install-plugin:

rust.uninstall:
	-rm -rf $(DESTDIR)/$(bindir)/$(GCCRS_INSTALL_NAME)$(exeext)

rust.install-info: 
rust.install-pdf: 
rust.install-man:

# Stage hooks:
# The toplevel makefile has already created stage?/rust at this point.

rust.stage1: stage1-start
	-mv rust/*$(objext) stage1/rust
rust.stage2: stage2-start
	-mv rust/*$(objext) stage2/rust
rust.stage3: stage3-start
	-mv rust/*$(objext) stage3/rust
rust.stage4: stage4-start
	-mv rust/*$(objext) stage4/rust
rust.stageprofile: stageprofile-start
	-mv rust/*$(objext) stageprofile/rust
rust.stagefeedback: stagefeedback-start
	-mv rust/*$(objext) stagefeedback/rust

config.status: rust/config-lang.in

rustfront-end/%.o: rust/rustfrontend/%.cc
	$(COMPILE) $(RUST_INCLUDES) $<
	$(POSTCOMPILE)
