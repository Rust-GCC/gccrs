..
  Copyright 1988-2022 Free Software Foundation, Inc.
  This is part of the GCC manual.
  For copying conditions, see the copyright.rst file.

.. _powerpc-function-attributes:

PowerPC Function Attributes
^^^^^^^^^^^^^^^^^^^^^^^^^^^

These function attributes are supported by the PowerPC back end:

.. index:: indirect calls, PowerPC, longcall function attribute, PowerPC, shortcall function attribute, PowerPC

.. powerpc-fn-attr:: longcall, shortcall

  The :powerpc-fn-attr:`longcall` attribute
  indicates that the function might be far away from the call site and
  require a different (more expensive) calling sequence.  The
  ``shortcall`` attribute indicates that the function is always close
  enough for the shorter calling sequence to be used.  These attributes
  override both the :option:`-mlongcall` switch and
  the ``#pragma longcall`` setting.

  See :ref:`rs-6000-and-powerpc-options`, for more information on whether long
  calls are necessary.

.. index:: target function attribute

.. powerpc-fn-attr:: target (options)

  As discussed in :ref:`common-function-attributes`, this attribute
  allows specification of target-specific compilation options.

  On the PowerPC, the following options are allowed:

  :samp:`altivec` :samp:`no-altivec`

    .. index:: target("altivec") function attribute, PowerPC

    Generate code that uses (does not use) AltiVec instructions.  In
    32-bit code, you cannot enable AltiVec instructions unless
    :option:`-mabi=altivec` is used on the command line.

  :samp:`cmpb` :samp:`no-cmpb`

    .. index:: target("cmpb") function attribute, PowerPC

    Generate code that uses (does not use) the compare bytes instruction
    implemented on the POWER6 processor and other processors that support
    the PowerPC V2.05 architecture.

  :samp:`dlmzb` :samp:`no-dlmzb`

    .. index:: target("dlmzb") function attribute, PowerPC

    Generate code that uses (does not use) the string-search :samp:`dlmzb`
    instruction on the IBM 405, 440, 464 and 476 processors.  This instruction is
    generated by default when targeting those processors.

  :samp:`fprnd` :samp:`no-fprnd`

    .. index:: target("fprnd") function attribute, PowerPC

    Generate code that uses (does not use) the FP round to integer
    instructions implemented on the POWER5+ processor and other processors
    that support the PowerPC V2.03 architecture.

  :samp:`hard-dfp` :samp:`no-hard-dfp`

    .. index:: target("hard-dfp") function attribute, PowerPC

    Generate code that uses (does not use) the decimal floating-point
    instructions implemented on some POWER processors.

  :samp:`isel` :samp:`no-isel`

    .. index:: target("isel") function attribute, PowerPC

    Generate code that uses (does not use) ISEL instruction.

  :samp:`mfcrf` :samp:`no-mfcrf`

    .. index:: target("mfcrf") function attribute, PowerPC

    Generate code that uses (does not use) the move from condition
    register field instruction implemented on the POWER4 processor and
    other processors that support the PowerPC V2.01 architecture.

  :samp:`mulhw` :samp:`no-mulhw`

    .. index:: target("mulhw") function attribute, PowerPC

    Generate code that uses (does not use) the half-word multiply and
    multiply-accumulate instructions on the IBM 405, 440, 464 and 476 processors.
    These instructions are generated by default when targeting those
    processors.

  :samp:`multiple` :samp:`no-multiple`

    .. index:: target("multiple") function attribute, PowerPC

    Generate code that uses (does not use) the load multiple word
    instructions and the store multiple word instructions.

  :samp:`update` :samp:`no-update`

    .. index:: target("update") function attribute, PowerPC

    Generate code that uses (does not use) the load or store instructions
    that update the base register to the address of the calculated memory
    location.

  :samp:`popcntb` :samp:`no-popcntb`

    .. index:: target("popcntb") function attribute, PowerPC

    Generate code that uses (does not use) the popcount and double-precision
    FP reciprocal estimate instruction implemented on the POWER5
    processor and other processors that support the PowerPC V2.02
    architecture.

  :samp:`popcntd` :samp:`no-popcntd`

    .. index:: target("popcntd") function attribute, PowerPC

    Generate code that uses (does not use) the popcount instruction
    implemented on the POWER7 processor and other processors that support
    the PowerPC V2.06 architecture.

  :samp:`powerpc-gfxopt` :samp:`no-powerpc-gfxopt`

    .. index:: target("powerpc-gfxopt") function attribute, PowerPC

    Generate code that uses (does not use) the optional PowerPC
    architecture instructions in the Graphics group, including
    floating-point select.

  :samp:`powerpc-gpopt` :samp:`no-powerpc-gpopt`

    .. index:: target("powerpc-gpopt") function attribute, PowerPC

    Generate code that uses (does not use) the optional PowerPC
    architecture instructions in the General Purpose group, including
    floating-point square root.

  :samp:`recip-precision` :samp:`no-recip-precision`

    .. index:: target("recip-precision") function attribute, PowerPC

    Assume (do not assume) that the reciprocal estimate instructions
    provide higher-precision estimates than is mandated by the PowerPC
    ABI.

  :samp:`string` :samp:`no-string`

    .. index:: target("string") function attribute, PowerPC

    Generate code that uses (does not use) the load string instructions
    and the store string word instructions to save multiple registers and
    do small block moves.

  :samp:`vsx` :samp:`no-vsx`

    .. index:: target("vsx") function attribute, PowerPC

    Generate code that uses (does not use) vector/scalar (VSX)
    instructions, and also enable the use of built-in functions that allow
    more direct access to the VSX instruction set.  In 32-bit code, you
    cannot enable VSX or AltiVec instructions unless
    :option:`-mabi=altivec` is used on the command line.

  :samp:`friz` :samp:`no-friz`

    .. index:: target("friz") function attribute, PowerPC

    Generate (do not generate) the ``friz`` instruction when the
    :option:`-funsafe-math-optimizations` option is used to optimize
    rounding a floating-point value to 64-bit integer and back to floating
    point.  The ``friz`` instruction does not return the same value if
    the floating-point number is too large to fit in an integer.

  :samp:`avoid-indexed-addresses` :samp:`no-avoid-indexed-addresses`

    .. index:: target("avoid-indexed-addresses") function attribute, PowerPC

    Generate code that tries to avoid (not avoid) the use of indexed load
    or store instructions.

  :samp:`paired` :samp:`no-paired`

    .. index:: target("paired") function attribute, PowerPC

    Generate code that uses (does not use) the generation of PAIRED simd
    instructions.

  :samp:`longcall` :samp:`no-longcall`

    .. index:: target("longcall") function attribute, PowerPC

    Generate code that assumes (does not assume) that all calls are far
    away so that a longer more expensive calling sequence is required.

  :samp:`cpu={CPU}`

    .. index:: target("cpu=CPU") function attribute, PowerPC

    Specify the architecture to generate code for when compiling the
    function.  If you select the ``target("cpu=power7")`` attribute when
    generating 32-bit code, VSX and AltiVec instructions are not generated
    unless you use the :option:`-mabi=altivec` option on the command line.

  :samp:`tune={TUNE}`

    .. index:: target("tune=TUNE") function attribute, PowerPC

    Specify the architecture to tune for when compiling the function.  If
    you do not specify the ``target("tune=TUNE")`` attribute and
    you do specify the ``target("cpu=CPU")`` attribute,
    compilation tunes for the :samp:`{CPU}` architecture, and not the
    default tuning specified on the command line.

  On the PowerPC, the inliner does not inline a
  function that has different target options than the caller, unless the
  callee has a subset of the target options of the caller.
